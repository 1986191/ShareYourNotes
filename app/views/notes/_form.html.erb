<script src="https://apis.google.com/js/api.js"></script>
<script src="https://accounts.google.com/gsi/client" async defer></script>
<div class="mx-5 p-5 rounded border shadow bg-body">
  <%= form_with(model: note) do |form| %>
    <% if note.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(note.errors.count, "error") %> prohibited this note from being saved:</h2>

        <ul>
          <% note.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div class="mb-3 field">
      <%= form.label :title, class:"form-label" %>
      <%= form.text_field :title, class:"form-control", autocomplete:"off"  %>
    </div>
    
    <div class="mb-3 field">
      <%= form.label :pdf, class:"form-label" %>
      <%= form.file_field :pdf,  multiple: true, class:"form-control" %>
    </div>

    <%#<div class="field">%>
    <%#  <%= form.label :owner_id %>
    <%#  <%= form.text_field :owner_id %>
    <%#</div>%>
   
    <div class="mb-3 field">
      <%= form.label :google_drive_file, "Select File from Google Drive", class:"form-label" %>
      <div class="input-group">
        <input type="text" id="google_drive_file_name" class="form-control" placeholder="Select a file from Google Drive" readonly>
        <button id="pick">Select File</button>
      </div>
      <%= form.hidden_field :google_drive_file_id, id: 'google_drive_file_id' %>
    </div>

    <div class="mb-3 field">
      <% @tags = "" %>
      <% note.tags.each do |tag| %>
        <% @tags += tag.name + "," %>
      <% end %>
      <% @tags = @tags[0...-1] %>
      <%= form.label :tag_names, "Tags", class:"form-label" %>
      <%= form.text_area :tag_names, class:"form-control fixed_textarea", autocomplete:"off", :rows => 3, placeholder: "Separa i tag con una virgola!", value: @tags %>
    </div>
     
    <div class="form-group">
      <%= form.label :university_id, "Selezionare una università", class:"form-label" %>
      <input type="text" class="form-control" placeholder="Università" list="list-university" id="input-datalist">
      <datalist id="list-university">
        <% @universities.each do |university| %>
          <option value="<%= university.name %>" data-id="<%= university.id %>"></option>
        <% end %>
      </datalist>
      <%= form.hidden_field :university_id, id: 'university_id' %>
    </div>

    <div class="mb-3 field">
      <%= form.label :course_id, "Selezionare un corso", class:"form-label" %>
      <%= form.select :course_id, options_for_select(@courses.map { |c| [c.name, c.id] }, note.course_id), {},{required: 'true', autofocus: 'true', class: 'form-control', id: 'course_id'} %>
    </div>

    <div class="d-flex justify-content-between">
      <div class="mt-3 field">
        <%= form.check_box :visibility , class:"form-check-input shadow"%>
        <%= form.label :visibility, "Pubblica", class:"form-check-label" %>
      </div>

      <div class="d-flex">
        <div class="mt-3 field actions">
          <%= form.submit class: 'btn btn-dark'%>
        </div>

        <div class="mt-3 ms-1 field actions">
          <%= link_to 'Back', notes_path, class:"btn btn-danger" %>
        </div>
      </div>
    </div>
  <% end %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const inputDatalist = document.getElementById('input-datalist');
  const universityIdField = document.getElementById('university_id');
  const courseSelect = document.getElementById('course_id');

  inputDatalist.addEventListener('input', function() {
    const options = document.querySelectorAll('#list-university option');
    options.forEach(option => {
      if (option.value === inputDatalist.value) {
        universityIdField.value = option.getAttribute('data-id');
        updateCourseSelect(option.getAttribute('data-id'));
      }
    });
  });

  function updateCourseSelect(universityId) {
    if (universityId) {
      fetch(`/notes/courses_by_university?university_id=${universityId}`)
        .then(response => response.json())
        .then(data => {
          courseSelect.innerHTML = '<option value="">Seleziona un corso</option>';
          if (data.length > 0) {
            data.forEach(function(course) {
              const option = new Option(course.name, course.id);
              courseSelect.add(option);
            });
          } else {
            courseSelect.innerHTML += '<option value="">Nessun corso disponibile</option>';
          }
        });
    }
  }
});
    let accessToken;

    function handlePickerClick() {
      google.accounts.oauth2.initTokenClient({
        client_id: '<%= ENV['GOOGLE_CLIENT_ID'] %>',
        scope: 'https://www.googleapis.com/auth/drive.file',
        callback: (response) => {
          if (response.error) {
            console.log('Auth failed', response);
            return;
          }
          accessToken = response.access_token;
          onPickerApiLoad();
        }
      }).requestAccessToken();
    }

    function onPickerApiLoad() {
      gapi.load('picker', {'callback': createPicker});
    }

    function createPicker() {
      if (!accessToken) {
        console.log('Access token is missing.');
        return;
      }

      var picker = new google.picker.PickerBuilder()
        .addView(google.picker.ViewId.DOCS)
        .setOAuthToken(accessToken)
        .setDeveloperKey('<%= ENV['GOOGLE_API_KEY'] %>')
        .setCallback(pickerCallback)
        .build();
      picker.setVisible(true);
    }

    function pickerCallback(data) {
      if (data.action == google.picker.Action.PICKED) {
        var fileId = data.docs[0].id;
        alert('File ID: ' + fileId);

        // Invia il file ID al server Rails per l'upload
        var form = document.createElement('form');
        form.method = 'POST';
        form.action = '/google_drive/upload';

        // Aggiungi il token di autenticità
      var authenticityToken = '<%= form_authenticity_token %>';
      var tokenField = document.createElement('input');
      tokenField.type = 'hidden';
      tokenField.name = '<%= request_forgery_protection_token %>';
      tokenField.value = authenticityToken;

        var fileField = document.createElement('input');
        fileField.type = 'hidden';
        fileField.name = 'file_id';
        fileField.value = fileId;
        
        var accessTokenField = document.createElement('input');
        accessTokenField.type = 'hidden';
        accessTokenField.name = 'access_token';
        accessTokenField.value = accessToken;

        form.appendChild(tokenField);
        form.appendChild(fileField);
        form.appendChild(accessTokenField);
        document.body.appendChild(form);
        form.submit();
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const pickButton = document.getElementById('pick');
      if (pickButton) {
        pickButton.addEventListener('click', handlePickerClick);
      }
    });

    document.addEventListener('turbolinks:load', () => {
      const pickButton = document.getElementById('pick');
      if (pickButton) {
        pickButton.addEventListener('click', handlePickerClick);
      }
    });
</script>
