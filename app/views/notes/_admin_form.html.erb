<div class="mx-5 p-5 rounded border shadow bg-body">
  <%= form_with(model: note) do |form| %>
    <% if note.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(note.errors.count, "error") %> prohibited this note from being saved:</h2>

        <ul>
          <% note.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div class="mb-3 field">
      <%= form.label :title, class:"form-label" %>
      <%= form.text_field :title, class:"form-control", autocomplete:"off"  %>
    </div>

    <div class="mb-3 field">
      <% @tags = "" %>
      <% note.tags.each do |tag| %>
        <% @tags += tag.name + "," %>
      <% end %>
      <% @tags = @tags[0...-1] %>
      <%= form.label :tag_names, "Tags", class:"form-label" %>
      <%= form.text_area :tag_names, class:"form-control fixed_textarea", autocomplete:"off", :rows => 3, placeholder: "Separa i tag con una virgola!", value: @tags %>
    </div>

    <div class="mb-3 form-group">
      <%= form.label :university_id, "Selezionare una università", class:"form-label" %>
      <% if note.university_id %>
        <% university_name = @universities.find(note.university_id).name %>
        <input type="text" class="form-control" placeholder="Università" list="list-university" id="input-datalist" value="<%= university_name %>">
      <% else %>
        <input type="text" class="form-control" placeholder="Università" list="list-university" id="input-datalist">
      <% end %>
      <datalist id="list-university">
        <% @universities.each do |university| %>
          <option value="<%= university.name %>" data-id="<%= university.id %>"></option>
        <% end %>
      </datalist>
      <%= form.hidden_field :university_id, id: 'university_id' %>
    </div>

    <div class="mb-3 field">
      <%= form.label :course_id, "Selezionare un corso", class:"form-label" %>
      <%= form.select :course_id, options_for_select(@courses.map { |c| [c.name, c.id] }, note.course_id), {},{required: 'true', autofocus: 'true', class: 'form-control', id: 'course_id'} %>
    </div>

    <div class="d-flex justify-content-between">
      <div class="d-flex">

        <div class="mt-3 field">
          <div class="bg-warning p-2 rounded border border-danger">
            <%= form.check_box :suspended , class:"form-check-input shadow"%>
            <%= form.label :suspended, "Sospendi", class:"form-check-label text-danger" %>
          </div>
        </div>

        <% if :visibility %>
          <div class="ms-3 mt-3 field">
            <div class="p-2">
              <%= form.check_box :visibility , class:"form-check-input shadow"%>
              <%= form.label :visibility, "Nota pubblica", class:"form-check-label" %>
            </div>
          </div>
        <% end %>

      </div>

      <div class="d-flex">
        <div class="mt-3 m-1 field actions">
           <%= link_to 'Show', @note, class:"btn btn-primary" %>
        </div>

        <div class="mt-3 m-1 field actions">
          <%= form.submit class: 'btn btn-warning'%>
        </div>

        <div class="mt-3 ms-1 field actions">
          <%= link_to 'Back', notes_path, class:"btn btn-danger" %>
        </div>
      </div>
    </div>
  <% end %>
</div>

<%= button_to 'Admin Destroy', note_path(note), method: :delete, data: { confirm: 'Are you sure?' }, class:"btn btn-danger m-5" %>


<script>
var init = false;
var GOOGLE_API_KEY = '<%= ENV['GOOGLE_API_KEY'] %>';

function initialize()
{
  if(init == false)
  {
    init = true;
    
    const inputDatalist = document.getElementById('input-datalist');
    const universityIdField = document.getElementById('university_id');
    const courseSelect = document.getElementById('course_id');

    inputDatalist.addEventListener('input', function() {
      const options = document.querySelectorAll('#list-university option');
      options.forEach(option => {
        if (option.value === inputDatalist.value) {
          universityIdField.value = option.getAttribute('data-id');
          updateCourseSelect(option.getAttribute('data-id'));
        }
      });
    });

    function updateCourseSelect(universityId) {
      if (universityId) {
        fetch(`/notes/courses_by_university?university_id=${universityId}`)
          .then(response => response.json())
          .then(data => {
            courseSelect.innerHTML = '<option value="">Seleziona un corso</option>';
            if (data.length > 0) {
              data.forEach(function(course) {
                const option = new Option(course.name, course.id);
                courseSelect.add(option);
              });
            } else {
              courseSelect.innerHTML += '<option value="">Nessun corso disponibile</option>';
            }
          });
      }
    }
  }
}

if(document.getElementById('input-datalist') && document.getElementById('university_id') && document.getElementById('course_id'))
{
  initialize();
}

document.addEventListener('DOMContentLoaded', function() {
  initialize();
});
  
</script>


